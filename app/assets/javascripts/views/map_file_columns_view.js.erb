'use strict';

(function(App) {

  App.View = App.View || {};

  App.View.MapFileColumns = Backbone.View.extend({

    defaults: {
      ignored_columns: ['cartodb_id','the_geom','the_geom_webmercator'],
      listContainer: 'map-columns-list',
    },

    columns: [],

    events: {
      'change': 'inputChanged'
    },

    initialize: function(params) {
      this.options = _.extend({}, this.defaults, params.options || {});
      this.ignored_columns = this.options.ignored_columns;
      this.listContainer = document.getElementById(this.options.listContainer);
      this.columnSelected = parseInt(this.el.getAttribute('data-column'));
      if (this.el.getAttribute('data-filename')){
        this.init(this.el.getAttribute('data-filename'));
      }
    },

    init: function(fileName) {
      var self = this
      var promise = self.getColumns(fileName);
      promise.done(function(){
        self.refreshColumns();
      });
      promise.fail(function(error){
        self.handleColumnsError(error);
      });
    },

    inputChanged: function(e) {
      var self = this;
      var file = e.currentTarget.files[0];
      var extension = file.name.substr(file.name.lastIndexOf('.')+1);
      if (extension === "csv"){
        self.init(file.name.slice(0, -extension.length-1));
      }
    },

    getColumns: function(name) {
      var self = this;
      var query = 'SELECT * FROM ' + name + ' LIMIT 0';
      var defer = new $.Deferred();
      $.getJSON('https://'+'<%= ENV["CDB_USERNAME"] %>'+'.cartodb.com/api/v2/sql/?q='+query)
        .done(function(data){
          $.each(data.fields, function(key, val) {
            if (!_.contains(self.ignored_columns, key)) {
              self.columns.push(key);
            }
          });
          if (self.columns.length){
            defer.resolve();
          } else {
            defer.reject('there are not columns');
          }
        }).fail(function(){
          defer.reject('fail getting columns');
        });

      return defer;
    },

    refreshColumns: function() {
      var self = this;
      _.each(self.columns, function(element, index){
        self.addColummn(element,index);
      });
    },

    addColummn: function(element, index) {
      this.listContainer.insertAdjacentHTML("afterbegin", this._columnTemplate(element,index));
    },

    _columnTemplate: function(element,index) {
      debugger;
      var selected_class = (index === this.columnSelected) ? '_selected':'';
      return '<div class="item '+ selected_class +'" data-value="'+index+'">'+
              '<span>'+element+'</span>'+
            '</div>'
    },

    handleColumnsError: function(error) {
      console.log(error);
    }

  });

})(window.App || {});
